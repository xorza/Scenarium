// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod example {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum InnerTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct InnerTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InnerTable<'a> {
  type Inner = InnerTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> InnerTable<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    InnerTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args InnerTableArgs<'args>
  ) -> flatbuffers::WIPOffset<InnerTable<'bldr>> {
    let mut builder = InnerTableBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    builder.add_id(args.id);
    builder.finish()
  }

  pub fn unpack(&self) -> InnerTableT {
    let id = self.id();
    let value = self.value().map(|x| {
      x.to_string()
    });
    InnerTableT {
      id,
      value,
    }
  }

  #[inline]
  pub fn id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(InnerTable::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn value(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(InnerTable::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for InnerTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct InnerTableArgs<'a> {
    pub id: i32,
    pub value: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for InnerTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    InnerTableArgs {
      id: 0,
      value: None,
    }
  }
}

pub struct InnerTableBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> InnerTableBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: i32) {
    self.fbb_.push_slot::<i32>(InnerTable::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(InnerTable::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> InnerTableBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    InnerTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InnerTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for InnerTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("InnerTable");
      ds.field("id", &self.id());
      ds.field("value", &self.value());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct InnerTableT {
  pub id: i32,
  pub value: Option<String>,
}
impl Default for InnerTableT {
  fn default() -> Self {
    Self {
      id: 0,
      value: None,
    }
  }
}
impl InnerTableT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<InnerTable<'b>> {
    let id = self.id;
    let value = self.value.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    InnerTable::create(_fbb, &InnerTableArgs{
      id,
      value,
    })
  }
}
pub enum OuterTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OuterTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OuterTable<'a> {
  type Inner = OuterTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OuterTable<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_ITEMS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OuterTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OuterTableArgs<'args>
  ) -> flatbuffers::WIPOffset<OuterTable<'bldr>> {
    let mut builder = OuterTableBuilder::new(_fbb);
    if let Some(x) = args.items { builder.add_items(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> OuterTableT {
    let name = self.name().map(|x| {
      x.to_string()
    });
    let items = self.items().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    OuterTableT {
      name,
      items,
    }
  }

  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OuterTable::VT_NAME, None)}
  }
  #[inline]
  pub fn items(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<InnerTable<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<InnerTable>>>>(OuterTable::VT_ITEMS, None)}
  }
}

impl flatbuffers::Verifiable for OuterTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<InnerTable>>>>("items", Self::VT_ITEMS, false)?
     .finish();
    Ok(())
  }
}
pub struct OuterTableArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub items: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<InnerTable<'a>>>>>,
}
impl<'a> Default for OuterTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    OuterTableArgs {
      name: None,
      items: None,
    }
  }
}

pub struct OuterTableBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OuterTableBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OuterTable::VT_NAME, name);
  }
  #[inline]
  pub fn add_items(&mut self, items: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<InnerTable<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OuterTable::VT_ITEMS, items);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OuterTableBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OuterTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OuterTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OuterTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OuterTable");
      ds.field("name", &self.name());
      ds.field("items", &self.items());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OuterTableT {
  pub name: Option<String>,
  pub items: Option<Vec<InnerTableT>>,
}
impl Default for OuterTableT {
  fn default() -> Self {
    Self {
      name: None,
      items: None,
    }
  }
}
impl OuterTableT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OuterTable<'b>> {
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let items = self.items.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    OuterTable::create(_fbb, &OuterTableArgs{
      name,
      items,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OuterTable`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_outer_table_unchecked`.
pub fn root_as_outer_table(buf: &[u8]) -> Result<OuterTable, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OuterTable>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OuterTable` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_outer_table_unchecked`.
pub fn size_prefixed_root_as_outer_table(buf: &[u8]) -> Result<OuterTable, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OuterTable>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OuterTable` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_outer_table_unchecked`.
pub fn root_as_outer_table_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OuterTable<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OuterTable<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OuterTable` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_outer_table_unchecked`.
pub fn size_prefixed_root_as_outer_table_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OuterTable<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OuterTable<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OuterTable and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OuterTable`.
pub unsafe fn root_as_outer_table_unchecked(buf: &[u8]) -> OuterTable {
  flatbuffers::root_unchecked::<OuterTable>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OuterTable and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OuterTable`.
pub unsafe fn size_prefixed_root_as_outer_table_unchecked(buf: &[u8]) -> OuterTable {
  flatbuffers::size_prefixed_root_unchecked::<OuterTable>(buf)
}
#[inline]
pub fn finish_outer_table_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OuterTable<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_outer_table_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OuterTable<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Example

