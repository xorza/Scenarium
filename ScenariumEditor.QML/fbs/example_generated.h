// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXAMPLE_EXAMPLE_H_
#define FLATBUFFERS_GENERATED_EXAMPLE_EXAMPLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Example {

struct InnerStruct;
struct InnerStructBuilder;

struct OuterStruct;
struct OuterStructBuilder;

struct InnerStruct FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InnerStructBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_VALUE = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct InnerStructBuilder {
  typedef InnerStruct Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(InnerStruct::VT_ID, id, 0);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(InnerStruct::VT_VALUE, value);
  }
  explicit InnerStructBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InnerStruct> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InnerStruct>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InnerStruct> CreateInnerStruct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  InnerStructBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<InnerStruct> CreateInnerStructDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return Example::CreateInnerStruct(
      _fbb,
      id,
      value__);
}

struct OuterStruct FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OuterStructBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ITEMS = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Example::InnerStruct>> *items() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Example::InnerStruct>> *>(VT_ITEMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           verifier.EndTable();
  }
};

struct OuterStructBuilder {
  typedef OuterStruct Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(OuterStruct::VT_NAME, name);
  }
  void add_items(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Example::InnerStruct>>> items) {
    fbb_.AddOffset(OuterStruct::VT_ITEMS, items);
  }
  explicit OuterStructBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OuterStruct> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OuterStruct>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OuterStruct> CreateOuterStruct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Example::InnerStruct>>> items = 0) {
  OuterStructBuilder builder_(_fbb);
  builder_.add_items(items);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OuterStruct> CreateOuterStructDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<Example::InnerStruct>> *items = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto items__ = items ? _fbb.CreateVector<::flatbuffers::Offset<Example::InnerStruct>>(*items) : 0;
  return Example::CreateOuterStruct(
      _fbb,
      name__,
      items__);
}

inline const Example::OuterStruct *GetOuterStruct(const void *buf) {
  return ::flatbuffers::GetRoot<Example::OuterStruct>(buf);
}

inline const Example::OuterStruct *GetSizePrefixedOuterStruct(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Example::OuterStruct>(buf);
}

inline bool VerifyOuterStructBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Example::OuterStruct>(nullptr);
}

inline bool VerifySizePrefixedOuterStructBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Example::OuterStruct>(nullptr);
}

inline void FinishOuterStructBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Example::OuterStruct> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOuterStructBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Example::OuterStruct> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Example

#endif  // FLATBUFFERS_GENERATED_EXAMPLE_EXAMPLE_H_
